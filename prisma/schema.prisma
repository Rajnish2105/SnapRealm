// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  description String? @db.VarChar(1000)
  media   String[]
  
  //creator
  author    User     @relation(fields: [authorId], references: [id])    //make realtion betweeen authorid and user.id 
  authorId  Int

  //post comment
  comments   Comment[] 
  
  //post saved by user
  savers     User[]   @relation("SavedPosts")

  //likes
  likedby     Likedby[] // The users who liked this post
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String?
  username    String?  @unique
  password    String?
  image       String?
  bio         String?
  provider    String 
  createdAt   DateTime @default(now())

  //user posts
  posts       Post[]  
  
  //user followers list
  followedBy  Follows[] @relation("followedBy")
  following   Follows[] @relation("following")

  //user comments
  comments   Comment[]  @relation("UserComments")

  //saved post realted to name SavedPosts to a user
  savedPosts Post[]     @relation("SavedPosts")	

  stories    Story[]      

  //liked posts
  likes       Likedby[] // The posts liked by the user
}

model Likedby {
  user      User   @relation(fields: [userId], references: [id])
  userId    Int

  post      Post   @relation(fields: [postId], references: [id])
  postId    Int

  @@id([userId, postId]) // Composite primary key to prevent duplicate likes by the same user on the same post
}

model Follows {

  //the person who is following.
  followedBy   User @relation("followedBy", fields: [followedById], references: [id])
  followedById Int

  //person i am following who is being followed by another user(us)
  following    User @relation("following", fields: [followingId], references: [id])
  followingId  Int

  @@id([followingId, followedById])
}

model Comment {
  id      String   @id @default(uuid())
  content String
  post    Post     @relation(fields: [postId], references: [id])
  postId  Int
  author  User     @relation(fields: [authorId], references: [id], name: "UserComments")
  authorId Int
}

model Story {
  id        String   @id @default(uuid())
  stories  String[]
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
